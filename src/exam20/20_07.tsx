import ReactDOM from "react-dom/client";
import { ThunkAction, ThunkDispatch } from "redux-thunk";
import { Provider, TypedUseSelectorHook, useDispatch, useSelector } from "react-redux";
import React, { useEffect, useState } from "react";
import axios from "axios";
import { configureStore, combineReducers } from "@reduxjs/toolkit";

// Styles
const table: React.CSSProperties = {
    borderCollapse: "collapse",
    width: "100%",
    tableLayout: "fixed",
};

const th: React.CSSProperties = {
    padding: "10px",
    border: "1px solid black",
    background: "lightgray",
    cursor: "pointer",
};

const td: React.CSSProperties = {
    padding: "10px",
    border: "1px solid black",
};

// Types
type UserType = {
    id: string;
    name: string;
    age: number;
};

type UsersResponseType = {
    items: UserType[];
    totalCount: number;
};

type ParamsType = {
    sortBy: string | null;
    sortDirection: "asc" | "desc" | null;
};

// API
const instance = axios.create({ baseURL: "https://exams-frontend.kimitsu.it-incubator.ru/api/" });

const api = {
    getUsers(params?: ParamsType) {
        return instance.get<UsersResponseType>("users", { params });
    },
};

// Reducer
const initState = { users: [] as UserType[] };
type InitStateType = typeof initState;

const appReducer = (state: InitStateType = initState, action: ActionsType): InitStateType => {
    switch (action.type) {
        case "SET_USERS":
            return { ...state, users: action.users };
        default:
            return state;
    }
};

// Store
const rootReducer = combineReducers({ app: appReducer });

const store = configureStore({ reducer: rootReducer });
type RootState = ReturnType<typeof store.getState>;
type AppDispatch = ThunkDispatch<RootState, unknown, ActionsType>;
type AppThunk<ReturnType = void> = ThunkAction<ReturnType, RootState, unknown, ActionsType>;
const useAppDispatch = () => useDispatch<AppDispatch>();
const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;

const setUsersAC = (users: UserType[]) => ({ type: "SET_USERS", users }) as const;
type ActionsType = ReturnType<typeof setUsersAC>;

// Thunk
const getUsersTC =
    (searchParams?: ParamsType): AppThunk =>
        (dispatch) => {
            api.getUsers(searchParams).then((res) => dispatch(setUsersAC(res.data.items)));
        };

export const Users = () => {
    const [activeColumn, setActiveColumn] = useState<ParamsType>({
        sortBy: null,
        sortDirection: "asc",
    });

    const users = useAppSelector((state) => state.app.users);

    const dispatch = useAppDispatch();

    useEffect(() => {
        dispatch(activeColumn.sortBy ? getUsersTC(activeColumn) : getUsersTC());
    }, [activeColumn]);

    /*  const sortHandler = (sortBy: string) => {
          // ‚ùó‚ùó‚ùó XXX ‚ùó‚ùó‚ùó
      };*/

    const sortHandler = (sortBy: string) => {
        let newSort: "asc" | "desc" = "asc";
        if (activeColumn.sortBy === sortBy && activeColumn.sortDirection === "asc") {
            newSort = "desc";
        }
        setActiveColumn({
            sortBy,
            sortDirection: newSort,
        });
    };

    return (
        <div>
            <h1>üë™ –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</h1>
            <table style={table}>
                <thead>
                <tr>
                    <th style={th} onClick={() => sortHandler("name")}>
                        Name
                        {activeColumn?.sortBy === "name" &&
                            (activeColumn.sortDirection === "asc" ? (
                                <span> &#8593;</span>
                            ) : (
                                <span> &#8595;</span>
                            ))}
                    </th>
                    <th style={th} onClick={() => sortHandler("age")}>
                        Age
                        {activeColumn?.sortBy === "age" &&
                            (activeColumn.sortDirection === "asc" ? (
                                <span> &#8593;</span>
                            ) : (
                                <span> &#8595;</span>
                            ))}
                    </th>
                </tr>
                </thead>
                <tbody>
                {users.map((u) => {
                    return (
                        <tr key={u.id}>
                            <td style={td}>{u.name}</td>
                            <td style={td}>{u.age}</td>
                        </tr>
                    );
                })}
                </tbody>
            </table>
        </div>
    );
};

const root = ReactDOM.createRoot(document.getElementById("root") as HTMLElement);
root.render(
    <Provider store={store}>
        <Users />
    </Provider>,
);

// üìú –û–ø–∏—Å–∞–Ω–∏–µ:
// –ü–µ—Ä–µ–¥ –≤–∞–º–∏ —Ç–∞–±–ª–∏—Ü–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏.
// –í–∞—à–∞ –∑–∞–¥–∞—á–∞ –≤–º–µ—Å—Ç–æ XXX –Ω–∞–ø–∏—Å–∞—Ç—å –∫–æ–¥ –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∏–º–µ–Ω–∏ –∏ –≤–æ–∑—Ä–∞—Å—Ç—É.
// –¢.–µ. –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ name –ª–∏–±–æ age –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –¥–æ–ª–∂–Ω—ã —Å–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ —Ç–∞–±–ª–∏—Ü–µ.
// –ü—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–º –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ —ç—Ç–æ—Ç –∂–µ —Å—Ç–æ–ª–±–µ—Ü —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
// ‚ùó —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ, —Ç.–µ. sort –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–µ –Ω—É–∂–Ω–æ

// üñ• –ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: sort(a, b) –Ω–µ –≤–µ—Ä–Ω–æ   let newSort: "asc" | "desc" = "asc";
//         if (activeColumn.sortBy === sortBy && activeColumn.sortDirection === "asc") {
//             newSort = "desc";
//         }
//         setActiveColumn({
//             sortBy,
//             sortDirection: newSort,
//         });

// –∏ —ç—Ç–æ –Ω–µ –≤–µ—Ä–Ω–æ    let newSortDirection: "asc" | "desc" = "asc";
//
//         if (activeColumn.sortBy === sortBy) {
//             newSortDirection = activeColumn.sortDirection === "asc" ? "desc" : "asc";
//         }
//         const newActiveColumn: ParamsType = {
//             sortBy,
//             sortDirection: newSortDirection,
//         };
//
//         setActiveColumn(newActiveColumn);
//‚ùó‚ùó‚ùó XXX ‚ùó‚ùó‚ùó
//
//        –ú–æ–∂–Ω–æ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å  const sortHandler = (sortBy: string) => {
//   // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ –∫–∞–∫–æ–º—É —Å—Ç–æ–ª–±—Ü—É –Ω—É–∂–Ω–æ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å
//   if (sortBy === 'name') {
//     // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∏–º–µ–Ω–∏
//     const sortedUsers = [...users].sort((a, b) => a.name.localeCompare(b.name));
//     // –ï—Å–ª–∏ —Ç–µ–∫—É—â–∏–π —Å—Ç–æ–ª–±–µ—Ü —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –∞–∫—Ç–∏–≤–Ω—ã–º —Å—Ç–æ–ª–±—Ü–æ–º, –º–µ–Ω—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
//     if (activeColumn.sortBy === 'name') {
//       sortedUsers.reverse();
//     }
//     // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
//     dispatch(setUsers(sortedUsers));
//     // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —Å—Ç–æ–ª–±–µ—Ü
//     setActiveColumn({ sortBy: 'name', sortDirection: activeColumn.sortDirection === 'asc' ? 'desc' : 'asc' });
//   } else if (sortBy === 'age') {
//     // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É
//     const sortedUsers = [...users].sort((a, b) => a.age - b.age);
//     // –ï—Å–ª–∏ —Ç–µ–∫—É—â–∏–π —Å—Ç–æ–ª–±–µ—Ü —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –∞–∫—Ç–∏–≤–Ω—ã–º —Å—Ç–æ–ª–±—Ü–æ–º, –º–µ–Ω—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
//     if (activeColumn.sortBy === 'age') {
//       sortedUsers.reverse();
//     }
//     // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
//     dispatch(setUsers(sortedUsers));
//     // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —Å—Ç–æ–ª–±–µ—Ü
//     setActiveColumn({ sortBy: 'age', sortDirection: activeColumn.sortDirection === 'asc' ? 'desc' : 'asc' });
//   }
// };